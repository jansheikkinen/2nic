
program = { include | declaration } EOF

include = "include" "(" IDENTIFIER ")" ";"
declaration = struct | enum | union | function | variable

type = primitive | pointer | array | compound_type | optional
optional = "?" type
pointer = "&" type
array = "[" "]" type
compound_type = ("struct" | "enum" | "union" | "function") IDENTIFIER
primitive_type = ? int8-64 uint8-64 float8-64 ? | "isize" | "usize" | "fsize"
  | "char" | "type" | "void" | "noreturn"

struct = "struct" IDENTIFIER? "{" lvalue_list ";" "}"
union = "union" IDENTIFIER? "{" lvalue_list ";" "}"
enum = "enum" IDENTIFIER? "{" enum_list "}"
function = "function" IDENTIFIER "(" (lvalue_list | "void") ")" (type | "void")
            [ "where" rvalue_list ] block
variable = "let" lvalue_list "=" rvalue_list ";"


expression = cast | "undefined" | statement

statement = if | while | for | block | variable
builtin = ("continue" | "return" | "break") [ "(" expression ")" ]
block = "{" { statement ";" } expression? "}"
if = "if" "(" expression ")" expression [ else ]
while = "while" "(" expression ")" expression [ else ]
for = "for" "(" [ expression ";" ] [ expression? ";" ] expression ")" expression [ else ]
else = "else" expression

cast = assignment "as" type | assignment
assignment = call assign_ops assignment | logic_or
logic_or = logic_and { "or" logic_and }
logic_and = equality { "and" equality }
equality = comparison { ("==" | "!=") comparison }
comparison = bitwise { ("<" | "<=" | ">" | ">=") bitwise }
bitwise = term { ("&" | "|" | "^" | "<<" | ">>") term }
term = factor { ("-" | "-%" | "+" | "+%") factor }
factor = unary { ("*" | "*%" | "/" | "%") unary }
unary = ("not" | "!" | "-" | "*" | "&") unary | call
call = primary { "(" rvalue_list? ")" | field | array_index }
primary = "(" expression ")" | NUMBER | STRING | CHARACTER | "true" | "false"
        | "{" rvalue_list "}" | "undefined"

assign_ops = "=" | ? any binary operator + "=" ?
field = ("." | "->") IDENTIFIER
array_index = "[" expression "]"

assignment_list = lvalue_list "=" rvalue_list

lvalue_list = lvalue { "," lvalue }
lvalue = IDENTIFIER [ ":" type ]

rvalue_list = expression { "," expression }

enum_list = enum_arg { "," enum_arg }
enum_arg = IDENTIFIER "=" expression

type_list = type { "," type }
